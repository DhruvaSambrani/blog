<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>Dhruva's Blog</title><link>https://dhruvasambrani.github.io/blog</link><description>Dhruva's Blog, a collectionf of thoughts, guides and random shit</description><ttl>60</ttl><atom:link href="https://dhruvasambrani.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/><item><pubDate>Fri, 20 Aug 2021 00:00:00 +0530</pubDate><title>My Calendar Setup</title><link>https://dhruvasambrani.github.io/blog/./2021-08-20_010631</link><description>I love TUIs and wanted to use calcurse everywhere</description><content:encoded><![CDATA[
<h1 id=my-calendar-setup>My calendar setup</h1><blockquote><p>Edit: No longer true, I now use <code>vdirsyncer</code>, <code>khal</code> and <code>khard</code>. Just read <a href=https://hund.tty1.se/2020/08/12/how-to-sync-and-manage-your-caldav-and-carddav-via-the-terminal.html>hund’s blog</a>. The calcurse syncing was such a big pain, and I started to selfhost radicale and so everything was pretty easy.</blockquote><h2 id=the-problem>The Problem</h2><p>I love TUIs. Being able to use just keys to do a lot of things without touching your mouse is pretty awesome. But I can’t constantly be on my laptop. I mean sure, with the pandemic, that’s all I’ve done, but <del>if</del> when it gets over, I’ll be on the move. I can’t turn on my laptop for every damn thing. I <em>need</em> to have the things I am working with on my phone too, especially things like the calendar. Now you get to read about the things I’ve tried to set up a TUI calendar which also syncs to my phone.<h2 id=on-my-laptop>On my laptop</h2><p>Conclusion: Calcurse. Beautiful.<p>I first tried <a href=https://linux.die.net/man/1/remind><code>remind</code></a> with <a href=https://github.com/haguenau/wyrd><code>wyrd</code></a>, but it just seemed too… much. It’s pretty cool, but it seems to have a very condensed UI, and I prefer more open UIs<p>Then I tried <a href=https://www.calcurse.org/><code>calcurse</code></a>. With a pretty light UI and sensible (read vim-like) key bindings, it’s super easy to get a hang of. Creating, editing and other stuff is pretty easy. Also, the notes feature is pretty awesome as it allows me to add pesky zoom links which have a tendency to get mixed up. Zoom should just give a random name to their meetings, like yellow-monkey-poop or something. It might even bring some joy into a dreary life of pointless Zoom meetings. Anywho, I pretty much stuck to calcurse.<p>But then I read about khal in <a href=https://hund.tty1.se/2020/08/12/how-to-sync-and-manage-your-caldav-and-carddav-via-the-terminal.html>hund’s blog</a> and decided to try it. The interface is a bit different, with way too many months shown at once, and the key bindings are weird too. It seemed like there were 3 layers to the UI- the month layer, the day layer and the event layer. Calcurse on the other hand uses a single layer with 3 parallel sections, the to-do, appointments and the month. Calcurse just looked better, but khal isn’t far behind.<h2 id=syncing-with-other-laptops>Syncing with other laptops</h2><p>Now comes the real issue. Syncing. Sure I could set up a CalDav server, but I don’t have a static IP, and if I go back to my institute, I will not be able to access my laptop. Also, my laptop has to always be up, which is not the case. Plus, implementing my own set up would be a pretty painful task.<p>I could use some online server, but I couldn’t find any services which were not self-hosting. Also, I wouldn’t be able to store the calcurse format, instead store an ical which I convert on opening calcurse, which seems dumb.<p>My solution was git. Git is device and OS-agnostic, and I already know how to use it. Plus I get a change history for free, though I assume that at some point the history will get too large, and I’ll have to squash previous commits, but that’s like a once in a year thing. Putting it on a remote server also ensures that it is backed up, so even if my beauty of a laptop dies, I’d still have my calendar.<p>You can make the calcurse directory a git repo and add <a href=https://calcurse.org/files/manual.html#_hooks>hooks</a> to commit and push in post-save and pull in pre-load. I used GitHub as the remote repo, but you could use anything of your choice. Now in another device, all I had to do was clone the calcurse directory, and I’d be done. Since literally everything from settings to hooks was in the same place, it would work exactly the same in all devices.<h2 id=calcurse-on-android>Calcurse on Android</h2><p>The final issue. Phone syncing.<p>My first attempt was to simply try to extend the same set up to android via <a href=https://termux.com/>termux</a>. While that worked, calcurse was pretty hopeless on such a tiny screen with a soft keyboard. TUIs are not made for touch screens. I tried wyrd and khal too, but they weren’t easy to use either.<p>I knew I could get the calcurse data onto the phone, it was the UI that was a problem. I briefly thought about making an app which could parse and display calcurse data, but then remembered the painful thing that is Android development. Plus I would basically have to rewrite the calcurse parser which itself is in constant development, which would mean my thing would have to be in constant development. No, thanks.<p>I then dabbled with exporting an ical file from calcurse on exit, which worked fine, and I was able to import it into my calendar(<a href=https://www.simplemobiletools.com/calendar/>Simple Calendar</a>) too. At first, it would import the data multiple times, but then I found out that adding <code>--export-uid</code> while exporting from calcurse prevented that from happening, so that was fine. But the major issue was that I would have to run the git pull myself and then open the ics file with the calendar. Then too, events which were deleted from calcurse wouldn’t be deleted from the calendar, as events would be imported and merged to the default calendar.<p>I needed a calendar app which would basically only display the ics file, that’s all. Not knowing any apps, I just typed <code>ics</code> into Aurora Droid and I found <a href=https://icsx5.bitfire.at/>ICSx⁵</a>. This was perfect. I could sync a CalDav server, and it would work perfectly.<p>But this cycled back to the first issue. I don’t want to set up CalDav. Then I thought of just trying to “sync” a URL which was just the link to an ics file. I used the <code>raw</code> link of the exported ics in my calcurse repo, and it worked!<p>Now, any time I edit the calendar on my laptop, it exports the calendar to an ics, commits it the repo, pushes to GitHub. From there, ICSx⁵ syncs the changes to my calendar when I refresh in the app.<p>Success!<h2 id=still-not-the-best>Still not the best</h2><p>This set up is still not perfect. I cannot make changes on my calendar app which propagate to the laptop. I have to fall back to the calcurse CLI or TUI to add an event via termux. It’s not a dealbreaker, especially since I don’t have too many updates anyway, but a person can dream.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2021-08-20_010631</guid></item><item><pubDate>Fri, 20 Aug 2021 00:00:00 +0530</pubDate><title>Closer to Truth</title><link>https://dhruvasambrani.github.io/blog/./2021-08-20_010715</link><description>A fiction piece</description><content:encoded><![CDATA[
<h1 id=closer-to-truth>Closer to Truth</h1><p>I was going to the mall when I saw three people sitting on the bench. As I approached them they started running away. I was surprised by this. Pleasantly surprised. It was rare that people ran from me, they generally fainted. I don’t really blame them. How often do you see Death anyway?<p>Non-believers were generally the ones that reacted worse than the believers. I suppose that the believers already plan for this moment. I’ve really wondered though, is it that they are closer to the truth because they believe in Me or are they further away because they do so without any real evidence. I never leave evidence.<hr><p><strong>Newspaper article</strong><blockquote><p>Three people die as they ran into a speeding truck. The bus driver held for homicide. Hearing on…</blockquote><p>Life was convenient
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2021-08-20_010715</guid></item><item><pubDate>Sun, 29 Aug 2021 00:00:00 +0530</pubDate><title>My thoughts on Gemini</title><link>https://dhruvasambrani.github.io/blog/./2021-08-29_185046</link><description>Opinions about the 'new' web</description><content:encoded><![CDATA[
<h1 id=my-thoughts-on-gemini>My thoughts on Gemini</h1><p>As I scrolled through my posts on Mastodon, I came across <a href=https://tilde.team/~scientiac/>scientiac’s</a> <a href=gemini://gemini.ctrl-c.club/~scientiac/>Gemini site</a> and was intrigued by the concept of Gemini.<h2 id=a-bloated-web>A Bloated Web</h2><p>Today’s day websites are filled with lovely designs and transitions and animations and… ads. While there is a certain beauty in these websites, they tend to distract users from real content. See any news site for example, it is nearly impossible to visit these sites without having an AdBlock installed.<p>Some of these UI “enhancements” may be well-intentioned and may even improve User Experience, but they often come at a cost to accessibility. As web layouts get more complex, and with barely any standardization, those who use assistive devices such as screen readers find it harder to navigate websites.<p>Technically too, this has certain costs. Websites are styled with (S)CSS and JavaScript, which add a ton of functionality to the websites. So much so that a web browser can even be entire OS, like the chrome OS. But this extra content, which is “hidden” from a user needs to be downloaded from some server, which slows down load times and pushes up data usage.<p>From a security standpoint too, arbitrary JS, especially “closed source” JS can pose threats. In order to mitigate these threats, additional features like sandboxing need to be implemented which further increases the weight of the browser.<p>Finally, an increasingly bloated web experience leads to people having to buy newer hardware as the software gets more and more demanding. This leads to increased consumerism and e-Waste, which is a whole another problem that we have to solve. It would make sense if truly newer features which add to the user experience are introduced, but it seems like efforts are put more towards increasing the data collected from users or adding unnecessary UI transitions which reduce accessibility.<h2 id=the-solution-is-gemini>The Solution is Gemini</h2><p>Most of these issues can be solved by “simply” enforcing standardized accessibility features, and better optimizers which strip out unnecessary CSS, and educating web designers that fancy design is not necessarily good design. But enforcing is damn near impossible(which is a good thing, as any mechanism that can enforce design can also enforce content), finding unused CSS classes is a difficult process(someone should check if it is NP-Hard), and even if web designers make simple designs, a focus on fast deployment forces web-builders to use bloated frameworks.<p>Gemini has a completely different take on this issue. In order to solve the issue for a smaller subset of websites, especially those of the blog/microblog variety, news sites and text heavy sites, Gemini completely restricts the kind of content that can be displayed.<p>The only things that can be displayed are 3 levels of headings, unformatted text, pre-formatted text, and out of text links. Each site must load within one request of the server. No images or other multimedia can be displayed inline, but browsers can pass over the link to other media players for a perfectly normal multimedia viewing. This allows clients to implement just one thing, and do it properly (yay, the Unix way!). The syntax too is stupidly simple, with no tags, no complex parsing, nothing. Just pure unadulterated content.<p>This simple website can then be rendered with any font, any colors, any OS. Hell, you can just <code>curl</code>, <code>less</code> and <code>grep</code> your way through it. A lack of layouting implies text readers can easily do what they are designed to do — read text.<p>This simplicity warms my Vim-using, markdown loving heart.<h2 id=but-is-it>…but, is it?</h2><p>The Gemini protocol can be extensively minimalist, with people debating on whether favicons in the form of emojis should be implemented or not. While every site looking the same could be extremely useful, as my friend put it, is r/aBoringUtopia. It prevents web developers from expressing themselves via design. Sure, Unicode art can provide some relief, but it is still lacking. I would have preferred at least “pure” markdown level formatting. But a valid response to this can be found on the <a href=https://gemini.circumlunar.space/>Project Gemini website</a> -<blockquote><p>Gemini will not replace the web</blockquote><p>I don’t want an image sharing website on Gemini, though it could very well be implemented by calling external applications. I don’t want a banking solution on Gemini, because I would prefer a more secure implementation(but open, one can dream) on the web. But I sure as hell don’t want to see 5 transitions, autoscrolling, 3 sign up boxes, 4 newsletter boxes, 15 cookie policies, 10 TnCs and a million ads just so that I can be depressed by a news article highlighting the effects of global warming. Give me just content.<p>Content is king.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2021-08-29_185046</guid></item><item><pubDate>Mon, 06 Sep 2021 00:00:00 +0530</pubDate><title>My blog on Gemini</title><link>https://dhruvasambrani.github.io/blog/./2021-09-06_010053</link><description>My weird setup to get my blog on Gemini</description><content:encoded><![CDATA[
<h1 id=my-blog-on-gemini>My blog on Gemini</h1><p>My <a href=./2021-08-29_185046>previous post</a> was a brief intro and what I feel about the Gemini protocol. All said and done, I thought that it wouldn’t hurt to “expand” my blog to the Gemini space too. This blog is about what I had to do to get my blog to the Gemini space. The blog is at <a href=gemini://gemini.ctrl-c.club/~dhruva>gemini://gemini.ctrl-c.club/~dhruva</a><p>Tl;dr — LOL no, read the whole thing.<h2 id=server-and-hosting>Server and Hosting</h2><p>The first thing I needed was a server to host my Gemini capsule. For my HTTP site, I use GitHub pages, which is super easy to set up because I don’t need to manage my own server. But is there something similar for Gemini?<p>Turns out, it’s even better. Tildeverse is a universe of Tilde server instances. What’s a tilde server? It’s a public server which you can request for an account on, and you can just… use it. So I signed up for an account on the <a href=https://ctrl-c.club/>ctrl-c club</a> tilde instance. In about a day I received my ssh details, and I was up and running in about 15 mins.<h2 id=using-franklin>Using Franklin</h2><p>My first approach was the most straightforward one. Git clone my blog, install Julia, run the Franklin build step, then do something to the HTML so that it would output the gmi file. The problem with this however is that Julia and the .julia directories are HUGE. My disk usage quickly hit the soft limit of 1Gb, and I really did not want to exploit the courtesy of the ctrl-c club.<p>I could try and attempt to only parse the markdown posts to gmi, but then all the Franklin specific content would have to be reparsed. I definitely don’t want to reimplement Franklin.jl. What then?<h2 id=scraping-the-blog>Scraping the blog</h2><p>So the constraint is that I cannot build the HTML files on the tilde server, but I need to build it before I can convert it to Gemini files. This catch-22 situation can only be solved by putting the Franklin build step on some other device, and only do the HTML → Gemini part of it on the tilde server.<p>Why not just get the rendered HTML directly from the website and convert it? But for this I would need to find the correct locations. Well, thank god for <code>sitemap.xml</code>.<p>So I curl the <code>sitemap.xml</code>, grep for “posts/”, sed out the useless parts, and for each link, download and convert. Voilà, one script to sync the Gemini server with the HTML blog!<h2 id=some-html-cleanup>Some HTML cleanup</h2><p>While the previous solution works from a technical point of view, the end result is… illegible. The problem is that the HTML page has a lot of links and layout which any HTML → gmi converter attempts to convert, leading to a lot of noise. I needed to only convert the content part of the page, not the entire thing.<p>However, the content <code>div</code> only has a class which differentiates it from the rest of the <code>div</code>s. While regexing the start of the content is easy, finding the closing <code>div</code> tag is pretty difficult with regex(technically impossible, as XML is a CFG, and HTML isn’t even that, but it can be done with a little extended regex and prayers to god.). I would need an entire HTML parser from some language, and write a proper program which would parse the HTML to get me the right <code>div</code>. This was again going into the territory of too much work.<p>All I needed was a way to demarcate the content. I could do that with comments, but those would be removed on build. So the trick I came up with was to add an extra <code>contentthing</code> tag where the content would be in the build templates. Since <code>contentthing</code> is not defined by anyone at all, no browser should render the page any differently than before. Writing a regex to find the content inside was now pretty easy. The irony however is that Gemini was made to get rid of non-standard HTML.<p>Another tiny issue was that Franklin added an extra <code>p</code> block inside a <code>blockquote</code>. This I fixed with a sed replace.<h2 id=the-htmlgmi-script>The HTML→gmi script</h2><p>This was pretty straightforward. <a href=https://github.com/LukeEmmet/html2gmi>html2gmi</a> is a go script which does the job very well.<h2 id=index.gmi>index.gmi</h2><p>While the posts were nicely converted, there was no way that the blog index page could be translated directly. I anyway needed an index page which was unique to the Gemini capsule. This I did by writing a template index.gmi which a python script fills with the posts. Now my capsule is complete.<h2 id=conclusion>Conclusion</h2><p>In the end, the final script is this -<div class=sourceCode id=cb1><pre class="sourceCode sh"><code class="sourceCode bash"><span id=cb1-1><a href=#cb1-1 aria-hidden=true tabindex=-1></a><span class=co>#! /bin/bash</span></span>
<span id=cb1-2><a href=#cb1-2 aria-hidden=true tabindex=-1></a><span class=fu>myf()</span> <span class=kw>{</span></span>
<span id=cb1-3><a href=#cb1-3 aria-hidden=true tabindex=-1></a>    <span class=va>out</span><span class=op>=</span><span class=va>$(</span><span class=fu>basename</span> <span class=va>$(</span><span class=fu>dirname</span> <span class=va>$1))</span>.gmi</span>
<span id=cb1-4><a href=#cb1-4 aria-hidden=true tabindex=-1></a>    <span class=bu>echo</span> <span class=va>$1</span></span>
<span id=cb1-5><a href=#cb1-5 aria-hidden=true tabindex=-1></a>    <span class=ex>curl</span> <span class=at>-sL</span> <span class=va>$1</span> <span class=kw>|</span></span>
<span id=cb1-6><a href=#cb1-6 aria-hidden=true tabindex=-1></a>        <span class=fu>sed</span> <span class=at>-E</span> <span class=st>&quot;s/(.*&lt;contentthing&gt;|&lt;\/contentthing&gt;.*)//g&quot;</span> <span class=kw>|</span></span>
<span id=cb1-7><a href=#cb1-7 aria-hidden=true tabindex=-1></a>        <span class=fu>sed</span> <span class=at>-E</span> <span class=st>&quot;s/&lt;blockquote&gt; &lt;p&gt;/&lt;blockquote&gt;/g&quot;</span> <span class=kw>|</span></span>
<span id=cb1-8><a href=#cb1-8 aria-hidden=true tabindex=-1></a>        <span class=fu>sed</span> <span class=at>-E</span> <span class=st>&quot;s/&lt;\/p&gt; &lt;\/blockquote&gt;/&lt;\/blockquote&gt;/g&quot;</span> <span class=kw>|</span></span>
<span id=cb1-9><a href=#cb1-9 aria-hidden=true tabindex=-1></a>        <span class=va>$HOME</span><span class=ex>/go/bin/html2gmi</span> <span class=at>-met</span> <span class=at>-l</span> 1 <span class=at>-o</span> <span class=va>$HOME</span>/public_gemini/<span class=va>$out</span></span>
<span id=cb1-10><a href=#cb1-10 aria-hidden=true tabindex=-1></a><span class=kw>}</span></span>
<span id=cb1-11><a href=#cb1-11 aria-hidden=true tabindex=-1></a><span class=bu>export</span> <span class=at>-f</span> <span class=va>myf</span></span>
<span id=cb1-12><a href=#cb1-12 aria-hidden=true tabindex=-1></a><span class=fu>rm</span> <span class=at>-rf</span> <span class=va>$HOME</span>/public_gemini/<span class=pp>*</span></span>
<span id=cb1-13><a href=#cb1-13 aria-hidden=true tabindex=-1></a><span class=ex>curl</span> <span class=at>-s</span> https://dhruvasambrani.github.io/blog/sitemap.xml <span class=at>--</span> <span class=kw>|</span> <span class=fu>grep</span> .<span class=pp>*</span>/posts/2.<span class=pp>*</span> <span class=kw>|</span> <span class=fu>sed</span> <span class=at>-E</span> <span class=st>&quot;s/([ ]*&lt;\/*loc&gt;)//g&quot;</span> <span class=kw>|</span> <span class=fu>xargs</span> <span class=at>-I{}</span> <span class=at>--</span> bash <span class=at>-c</span> <span class=st>&#39;myf &quot;{}&quot;&#39;</span></span>
<span id=cb1-14><a href=#cb1-14 aria-hidden=true tabindex=-1></a><span class=ex>python3</span> makeindex.py</span></code></pre></div><p>where <code>makeindex.py</code> is<div class=sourceCode id=cb2><pre class="sourceCode python"><code class="sourceCode python"><span id=cb2-1><a href=#cb2-1 aria-hidden=true tabindex=-1></a><span class=im>import</span> os</span>
<span id=cb2-2><a href=#cb2-2 aria-hidden=true tabindex=-1></a><span class=kw>def</span> listposts():</span>
<span id=cb2-3><a href=#cb2-3 aria-hidden=true tabindex=-1></a>    files <span class=op>=</span> os.listdir(<span class=st>&quot;../public_gemini/&quot;</span>)</span>
<span id=cb2-4><a href=#cb2-4 aria-hidden=true tabindex=-1></a>    files.sort()</span>
<span id=cb2-5><a href=#cb2-5 aria-hidden=true tabindex=-1></a>    <span class=cf>return</span>(<span class=st>&quot;</span><span class=ch>\n</span><span class=st>&quot;</span>.join([<span class=st>&quot;=&gt; &quot;</span><span class=op>+</span>_file <span class=cf>for</span> _file <span class=kw>in</span> files]))</span>
<span id=cb2-6><a href=#cb2-6 aria-hidden=true tabindex=-1></a><span class=cf>with</span> <span class=bu>open</span>(<span class=st>&quot;template.gmi&quot;</span>) <span class=im>as</span> f:</span>
<span id=cb2-7><a href=#cb2-7 aria-hidden=true tabindex=-1></a>    s <span class=op>=</span> f.read()</span>
<span id=cb2-8><a href=#cb2-8 aria-hidden=true tabindex=-1></a>    final <span class=op>=</span> s.replace(<span class=st>&quot;</span><span class=sc>{{</span><span class=st> listposts </span><span class=sc>}}</span><span class=st>&quot;</span>, listposts())</span>
<span id=cb2-9><a href=#cb2-9 aria-hidden=true tabindex=-1></a>    <span class=cf>with</span> <span class=bu>open</span>(<span class=st>&quot;../public_gemini/index.gmi&quot;</span>, <span class=st>&quot;w&quot;</span>) <span class=im>as</span> out:</span>
<span id=cb2-10><a href=#cb2-10 aria-hidden=true tabindex=-1></a>        out.write(final)</span></code></pre></div><p>By simply running <code>. makegemini.sh</code>, I can recreate my blog entirely in Gemini.<h2 id=things-i-can-improve>Things I can improve</h2><p>Definitely, there are still some things I can improve<ol type=1><li>The posts listed in the Gemini only have the filename and not the post title. This makes it hard for viewers to find a particular post<li>Post pages do not link back to the index page<li>Internal links may not work<li>HTML → Gemini isn’t the best, because scripts attempt to retain content while ignoring formatting, where in some places, it may be better to just leave the content on the whole.</ol><p>But on the whole, I’m pleased with the present output.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2021-09-06_010053</guid></item><item><pubDate>Fri, 29 Apr 2022 00:00:00 +0530</pubDate><title>Science articles everyday</title><link>https://dhruvasambrani.github.io/blog/./2022-04-29_150432</link><description>How I consume Science on a daily basis, why you should too, and fangirling about RSS</description><content:encoded><![CDATA[
<h1 id=science-articles-everyday>Science Articles Everyday</h1><p>I like science. I am a science student writing my masters thesis, and I need to read new articles related to my subject (Quantum Computing) everyday.<p>Even otherwise, I want to be somewhat up to date about things happening. Why? Because a couple of years ago, I got drawn so much into my other hobby of coding and tech that I started to lose touch with my love for Science. Much like how I lost in touch with my preference for music when I was younger. You need a constantexposure to what you like, and only then will you keep liking it.<h2 id=what-to-read>What to read</h2><p>There is a whole ocean of sites to read from. I prefer to stay away form the pop-sci kind of articles and youtube channels because it gives you a false sense of the topic, and as someone who knows a substantial amount of math and science, I prefer something with more rigor.<p>Cue Arxiv papers and Nature articles. There’s also Science, AIP and a tonne of other journals, but Nature has kept me happy. Viewing arxiv papers for my topics keeps me updated about the newest things and also sometimes pushes me into a new direction with my research. Nature and Science journals on the other hand give a more overview of things happening in the science world, and also introduce larger ideas and discussions related to academia in general.<h2 id=how-to-read>How to read</h2><p>Once I selected the sites I wanted to follow, I tried following them via their websites, but this is painfully hard. I then learnt about <a href=https://en.wikipedia.org/wiki/RSS>RSS</a> and was hooked. You simply have to copy the link of the feed you want to follow into your reader application and you get new articles everytime they update. No accounts, no changing apps, and no shady web ads. Just plain content, which is the best thing anyone can ask for.<p>So I added <a href=http://feeds.nature.com/nature/rss/current>Nature’s RSS feed link</a> which I got by just searching <code>Nature rss feeds</code>. Arxiv’s rss feeds are much more advanced and nuanced. Basically, it is of the form <code>https://export.arxiv.org/rss/topic.subtopic</code>, where the topic and subtopic list can be found <a href=https://arxiv.org/>here</a>.<p>I added these two to my feed readers, which are <a href=https://newsboat.org/>newsboat</a> for desktop and <a href=https://hyliu.me/fluent-reader/>Fluent Reader</a> for Android. IIRC, Fluent Reader is also available on iOS. That said there’s a plethora of other readers you can choose from.<p>And voila! Science in my feed.<h1 id=caveats>Caveats</h1><p>None, apart from when the pressure to read the articles. Most of the articles, I just read the title and decide to read it completely if I like it.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2022-04-29_150432</guid></item><item><pubDate>Sun, 01 May 2022 00:00:00 +0530</pubDate><title>My Todo Manager</title><link>https://dhruvasambrani.github.io/blog/./2022-05-01_164311</link><description>Making a Suckless Todo manager which also syncs with calcurse</description><content:encoded><![CDATA[
<h1 id=my-todo-manager>My Todo Manager</h1><h1 id=calcurse>Calcurse</h1><p>In my previous post about <a href=./2021-08-20_010631>my Calender Setup</a>, I mentioned about how I was using Calcurse as my calender. Now calcurse also has a Todo section which works great, except that I have to open calcurse to use it. I just want to quickly see what I need to do, press enter to say I am done with it and it should be gone. Adding an entry should be just as easy<h1 id=enter-dmenu>Enter dmenu</h1><p><code>dmenu</code> is a suckless menu selector which has fuzzy search (patch), default text (patch) and autocomplete. This is everything I need. So I made a script to use dmenu as my So I simply read the calcurse todo file and display a menu with each entry in the todo as a dmenu entry.<p>When user inputs, I check if it matches any previous entry. If it does, then I remove the entry from the todo file.<p>When the user input does not match any entry, it is assumed to be a new entry, and added to the file.<h1 id=rounding-off-edges>Rounding off edges</h1><p>This solution has 2 problems,<ol type=1><li>Calcurse uses a numbered ranking to signify the urgency of the entry. But adding a new entry at the default urgency is hard to type: <code>[0] Something I have to do</code>. So if the new entry input doesn’t start with <code>\[.\]</code>, the script just adds <code>[0]</code><li>There is no way to edit an entry. So I changed the script to put back the last deleted entry into the prompt. So an <code>edit</code> is actually a delete followed by a re-entry. If you really wanted to delete an entry, then just hit <code>ctrl-u</code> to clear the line.</ol><h1 id=tying-it-all-up-together>Tying it all up together</h1><p>I added a keybind to dwm to run my script, and everything works so beautifully. Now I can go and remove the todo entry to write this post.<h1 id=final-script>Final script</h1><p>Here is the final script-<div class=sourceCode id=cb1><pre class="sourceCode bash"><code class="sourceCode bash"><span id=cb1-1><a href=#cb1-1 aria-hidden=true tabindex=-1></a><span class=co>#!/bin/zsh</span></span>
<span id=cb1-2><a href=#cb1-2 aria-hidden=true tabindex=-1></a><span class=co>#</span></span>
<span id=cb1-3><a href=#cb1-3 aria-hidden=true tabindex=-1></a><span class=co># Write/remove a task to do later.</span></span>
<span id=cb1-4><a href=#cb1-4 aria-hidden=true tabindex=-1></a><span class=co>#</span></span>
<span id=cb1-5><a href=#cb1-5 aria-hidden=true tabindex=-1></a><span class=co># Select an existing entry to remove it from the file, or type a new entry to</span></span>
<span id=cb1-6><a href=#cb1-6 aria-hidden=true tabindex=-1></a><span class=co># add it.</span></span>
<span id=cb1-7><a href=#cb1-7 aria-hidden=true tabindex=-1></a><span class=co>#</span></span>
<span id=cb1-8><a href=#cb1-8 aria-hidden=true tabindex=-1></a></span>
<span id=cb1-9><a href=#cb1-9 aria-hidden=true tabindex=-1></a><span class=va>file</span><span class=op>=</span><span class=st>&quot;</span><span class=va>$HOME</span><span class=st>/.calcurse/todo&quot;</span></span>
<span id=cb1-10><a href=#cb1-10 aria-hidden=true tabindex=-1></a><span class=fu>touch</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span></span>
<span id=cb1-11><a href=#cb1-11 aria-hidden=true tabindex=-1></a><span class=va>height</span><span class=op>=</span><span class=va>$(</span><span class=fu>wc</span> <span class=at>-l</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span> <span class=kw>|</span> <span class=fu>awk</span> <span class=st>&#39;{print $1}&#39;</span><span class=va>)</span></span>
<span id=cb1-12><a href=#cb1-12 aria-hidden=true tabindex=-1></a><span class=va>prompt</span><span class=op>=</span><span class=st>&quot;Add/delete a task: &quot;</span></span>
<span id=cb1-13><a href=#cb1-13 aria-hidden=true tabindex=-1></a></span>
<span id=cb1-14><a href=#cb1-14 aria-hidden=true tabindex=-1></a><span class=va>cmd</span><span class=op>=</span><span class=va>$(</span><span class=fu>sort</span> <span class=at>-r</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span> <span class=kw>|</span> <span class=ex>dmenu</span> <span class=at>-l</span> <span class=st>&quot;</span><span class=va>$height</span><span class=st>&quot;</span> <span class=at>-p</span> <span class=st>&quot;</span><span class=va>$prompt</span><span class=st>&quot;</span> <span class=at>-i</span> <span class=va>)</span></span>
<span id=cb1-15><a href=#cb1-15 aria-hidden=true tabindex=-1></a><span class=cf>while</span> <span class=bu>[</span> <span class=ot>-n</span> <span class=st>&quot;</span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=bu>]</span><span class=kw>;</span> <span class=cf>do</span></span>
<span id=cb1-16><a href=#cb1-16 aria-hidden=true tabindex=-1></a>  <span class=cf>if</span> <span class=fu>grep</span> <span class=at>-qF</span> <span class=st>&quot;</span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span><span class=kw>;</span> <span class=cf>then</span></span>
<span id=cb1-17><a href=#cb1-17 aria-hidden=true tabindex=-1></a>        <span class=fu>grep</span> <span class=at>-vF</span> <span class=st>&quot;</span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span> <span class=op>&gt;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>.new&quot;</span> <span class=co># This selects all the lines that DONT match</span></span>
<span id=cb1-18><a href=#cb1-18 aria-hidden=true tabindex=-1></a>        <span class=fu>mv</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>.new&quot;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span></span>
<span id=cb1-19><a href=#cb1-19 aria-hidden=true tabindex=-1></a>    <span class=kw>((</span> <span class=va>height</span> <span class=op>=</span> <span class=va>height</span> <span class=op>-</span> <span class=dv>1</span> <span class=kw>))</span></span>
<span id=cb1-20><a href=#cb1-20 aria-hidden=true tabindex=-1></a>    <span class=cf>else</span></span>
<span id=cb1-21><a href=#cb1-21 aria-hidden=true tabindex=-1></a>    <span class=cf>if</span> <span class=kw>[[</span> <span class=st>&quot;</span><span class=va>$(</span><span class=bu>echo</span> <span class=va>$cmd</span> <span class=kw>|</span> <span class=fu>tr</span> <span class=at>-d</span> <span class=dt>\\</span>n<span class=va>)</span><span class=st>&quot;</span> <span class=ot>=~</span> <span class=st>&quot;^\[[[:digit:]]\]&quot;</span> <span class=kw>]];</span> <span class=cf>then</span></span>
<span id=cb1-22><a href=#cb1-22 aria-hidden=true tabindex=-1></a>      <span class=bu>echo</span> <span class=st>&quot;</span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=op>&gt;&gt;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span></span>
<span id=cb1-23><a href=#cb1-23 aria-hidden=true tabindex=-1></a>    <span class=cf>else</span></span>
<span id=cb1-24><a href=#cb1-24 aria-hidden=true tabindex=-1></a>      <span class=bu>echo</span> <span class=st>&quot;[0] </span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=op>&gt;&gt;</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span></span>
<span id=cb1-25><a href=#cb1-25 aria-hidden=true tabindex=-1></a>    <span class=cf>fi</span></span>
<span id=cb1-26><a href=#cb1-26 aria-hidden=true tabindex=-1></a>    <span class=va>cmd</span><span class=op>=</span><span class=st>&quot;&quot;</span></span>
<span id=cb1-27><a href=#cb1-27 aria-hidden=true tabindex=-1></a>    <span class=kw>((</span> <span class=va>height</span> <span class=op>=</span> <span class=va>height</span> <span class=op>+</span> <span class=dv>1</span> <span class=kw>))</span></span>
<span id=cb1-28><a href=#cb1-28 aria-hidden=true tabindex=-1></a>    <span class=cf>fi</span></span>
<span id=cb1-29><a href=#cb1-29 aria-hidden=true tabindex=-1></a></span>
<span id=cb1-30><a href=#cb1-30 aria-hidden=true tabindex=-1></a>  <span class=va>cmd</span><span class=op>=</span><span class=va>$(</span><span class=fu>sort</span> <span class=at>-r</span> <span class=st>&quot;</span><span class=va>$file</span><span class=st>&quot;</span> <span class=kw>|</span> <span class=ex>dmenu</span> <span class=at>-l</span> <span class=st>&quot;</span><span class=va>$height</span><span class=st>&quot;</span> <span class=at>-p</span> <span class=st>&quot;</span><span class=va>$prompt</span><span class=st>&quot;</span> <span class=at>-it</span> <span class=st>&quot;</span><span class=va>$cmd</span><span class=st>&quot;</span> <span class=st>&quot;</span><span class=va>$@</span><span class=st>&quot;</span> <span class=va>)</span></span>
<span id=cb1-31><a href=#cb1-31 aria-hidden=true tabindex=-1></a><span class=cf>done</span></span>
<span id=cb1-32><a href=#cb1-32 aria-hidden=true tabindex=-1></a></span>
<span id=cb1-33><a href=#cb1-33 aria-hidden=true tabindex=-1></a><span class=bu>exit</span> 0</span></code></pre></div>
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2022-05-01_164311</guid></item><item><pubDate>Thu, 12 May 2022 00:00:00 +0530</pubDate><title>Another blog</title><link>https://dhruvasambrani.github.io/blog/./2022-05-12_181238</link><description>I revamped my blog again instead of actually writing posts. Oh well.</description><content:encoded><![CDATA[
<h1 id=another-blog>Another blog</h1><p>I revamped my blog again instead of actually writing posts. Oh well.<h2 id=why>Why</h2><p>I wanted a minimalistically cool blog like <a href=https://erzadel.net/><span class=citation data-cites=edel>@edel</span>’s</a> and <a href=https://joelchrono12.xyz/><span class=citation data-cites=joel>@joel</span>’s</a> websites.<p>My previous blog setup was made using <a href=https://franklinjl.org/>Franklin.jl</a>, and building it implied setting up an entire julia installation. And even after all that, the blog looked pretty boring. I still struggled to set up tags and I had to constantly fight the default css or write everything myself. Also, when I built that blog, I was learning JS, and I used a lot of unnecessary js and styling. Finally, Franklin’s complex build meant that <a href=./2021-09-06_010053>my gemini build</a> was so much more harder to make.<h2 id=enter-pandoc>Enter pandoc</h2><p>I still wanted to write in markdown and make it to html. The best converter I know is pandoc. It has a very good template support, and having used it before, I was comfortable with it. I had already made a <a href=https://foambubble.github.io/foam/>foam</a> <a href=https://github.com/DhruvaSambrani/notes-template>template</a> for jekyll for my <a href=https://dhruvasambrani.github.io/notes>notes this semester</a>, and modifying it to match pandoc’s template was easy.<h2 id=gemini-build>Gemini Build</h2><p>The best part of pandoc is that it is so easily extendable. There is a gemtext filter for pandoc which meant that with just one more command I could also build my gemini capsule. I had to tweak the filter a bit to add <code>.gmi</code> to links where necessary, which was technically a simple change, but I don’t know lua, so I flailed around a bit before I got it. Templating for gemini was even easier since there isn’t much you can do in the first place.<h2 id=table-of-contents>Table of Contents</h2><p>I initially thought I would make the blog like a digital garden, but then decided against since I knew I wouldn’t write too much to actually populate the garden enough. And setting up such a thing I felt was way too complicated for a low traffic blog like mine.<p>So I ended making a Table of Contents. Previously, I just had the entry as the filename, but that was very difficult to follow. With a little of <code>sed</code>-fu, I extracted the title from the front matter. With a tiny change, I made it work for gemini too.<p>At this point, I was going to release the new blog, but then I had a new itch<h2 id=rss>RSS</h2><p>I wanted to also have an RSS feed. I already use RSS extensively for comics, <a href=./2022-04-29_150432>science</a> and other blogs, and wanted people to see mine too. I searched online a bit for an RSS maker script, but I only found subscription stuff. I was almost going to write my own script, when I came across a post on fosstodon which talked about an RSS-only blog. They used txt files to manage their content, but converting markdown to html was already possible with pandoc, so with some heavy modifications, I built the RSS feed with a script<h2 id=zk>ZK</h2><p>At this point, I was ALMOST going to publish it. I had made everything I wanted to. Just a few more CSS fixes, and we were good to go. But as I was setting up markdown support for lunarvim, I came across <a href=https://github.com/mickael-menu/zk>zk</a>. And this blew my mind. Without me doing anything, it gave me everything I needed. Contents were just one command away, and for almost free, I got tag support.<p>Within a day, I set up zk, added tags to my previous articles, added a new template for the tags page, and fixed some other templates. I also added a cute neon effect to the tag list at the end of every page. I found a small mistake in the gemini script, which I fixed.<p>Now, my blog is perfect.<p>Except…<h2 id=fediring-and-512kb-club>Fediring and 512KB club</h2><p>I really want to add my blog to both of these. For 512KB, I don’t know whether it is per page or per site. Right now, my site sits at 131KB for the whole thing, but that is with 8 posts. Every post I add, I add about 1KB. I don’t know how people are getting their sites to less than 100KB. That seems impossible.<p>As for fediring, it is just a matter of doing it, which I haven’t done.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2022-05-12_181238</guid></item><item><pubDate>Fri, 09 Sep 2022 00:00:00 +0530</pubDate><title>About self hosting</title><link>https://dhruvasambrani.github.io/blog/./2022-09-09_131905</link><description>My journey in self hosting</description><content:encoded><![CDATA[
<h1 id=self-hosting>Self hosting</h1><p>I was interested in self hosting from forever, but having to pay for a static IP and not having an extra computer to keep always on were hurdles that prevented me from trying anything. But that all changed when my university decided to install LAN ports in each room, allowing me to connect more than one device to the network. I brought with me an old laptop (Acer V or something), which no one was using.<h2 id=gitea-and-tailscale>Gitea and Tailscale</h2><p>After playing around a bit with installing arch and trying to use it in a dual screen setup with <a href=https://github.com/debauchee/barrier>barrier</a>, I finally got down to self hosting things. I first started with gitea, which seemed simple enough to install. I followed the arch wiki instructions, and was running gitea in about an hour on localhost. I already new how to port forward on the router so I set that up and I could connect as long as I was on the institute network.<p>There was still the issue of a lack of a public static IP. I turned to the internet for ideas, and put a post on r/selfhosted about the issue. I was directed towards <a href=https://tailscale.com/>Tailscale</a>, which took barely half an hour to install. Over the next few days I played around with tailscale and found the MagicDNS and AutoHTTPS settings. But now I had an issue caused by my institute proxy server. With the new domain names, the DNS resolver at the proxy server has to add the tailscale dns resolvers, but I don’t have access to it. Which meant that while my phone happily connected to the server over Cellular, my laptop couldn’t connect despite being on the same LAN without falling back to the local IP address. Oh well, at least a stopgap solution existed.<h2 id=nextcloud>Nextcloud</h2><p>Nextcloud was the next thing I wanted to selfhost. This was a big pain to get running. I was under the impression that all apps had their inbuilt web servers, and I just needed to set the correct ports to get them working. But nextcloud being a php application, needed a php webserver to be running first. This took me a while to understand. After this, I had issues with running the same postgres server for gitea and nextcloud. Not being too well versed with DBMS concepts, there were some weird issues with conflicting user permissions and stuff.<h2 id=docker>Docker</h2><p>At this point I gave up trying to run nextcloud on bare metal. Nearly all docs relate to running nextcloud in a docker container, but I had no idea what docker was. It took me a couple of weeks trying to get nextcloud to run from docker and understand what needed to be changed so it would run properly. Eventually I got it running on some port.<h2 id=caddy-and-reverse-proxy>Caddy and reverse proxy</h2><p>Once again, this was easy for gitea, because gitea has a clear example of gitea behind a caddy reverse proxy, and when I hadn’t set the right hostname in gitea’s config, it gave me a nice banner saying I had to change so and so variable at so and so location. Nice and clean. Now came nextcloud. I couldn’t for the life of me figure out where the config file was, because the docker container’s volume was in the default location in <code>/var/lib/docker/volumes</code>, and I had no idea it was there. Finally after some poking around, I changed the config, but to no avail. I kept having issue after issue with nextcloud. So I clean restarted the whole process, uninstalled postgres, gitea, docker, caddy, cleaned files, and put everything except caddy on docker. Once again I faced issues with the webroot on nextcloud and I kind of gave up for a while.<h2 id=another-attempt>Another attempt</h2><p>After a few weeks’ hiatus caused by a new semester, I tried setting it up again. I don’t know if it was just plain luck or the break had given some clarity of what had to be done, but this time I was able to set up everything pretty easily. Everything was working barring tailscale on LAN, which now seemed like the proxy server blocking the connection, along with the DNS issue.<h2 id=nextcloud-office-with-collabora>Nextcloud Office with Collabora</h2><p>Now I wanted to add Nextcloud office, but I was unsuccessful in getting the nextcloud instance to see the collabora server running in the same docker-compose file regardless of what I tried. Eventually I gave up.<h2 id=other-services>Other services</h2><p>I also have a docker running freshrss, but I haven’t set it up, but it seems pretty easy to set up. I’ll also probably try to set up hedgedocs as an alternative to nextcloud office, and then see if I can connect the nextcloud storage to hedgedocs, but I haven’t tried it yet.<h2 id=opinions-about-self-hosting>Opinions about self-hosting</h2><p>Self hosting isn’t easy, and I don’t see the point of it. It makes sense for a group or something like a mastodon or tilde instance to self host certain services for a more decentralized internet, but the effort of setting it up for personal access is not worth it.<p>For all editors or viewers, there are tonnes of local applications, and it makes no sense to use a server set up for it. The only point I see is as a backup solution or as a file sharing mechanism. For backup and sync, I feel syncthing is a lot easier to setup and get working. Sure, the connection between devices is a bit finicky sometimes, but its frankly alright. Syncthing + Tailscale satisfies whatever classic Nextcloud can do.<p>For those apps which need syncing of data between devices, it is a lot easier to look for public instances of them. The hostux network [hostux.network] provides a lot of services for free, and trusting them is about the same as trusting a droplet server.<p>As for Nextcloud, it now offers to set up a server for you on one of the VPS providers for free, which I think is a pretty great deal. For my music and photos, I sync using syncthing, and for documents, contacts, calendar, tasks, I use the nextcloud instance.<p>So with that, I don’t know how much longer I’ll try to get the self hosting thing working, but there you have it.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2022-09-09_131905</guid></item><item><pubDate>Mon, 24 Apr 2023 00:00:00 +0530</pubDate><title>Why so much Alcohol</title><link>https://dhruvasambrani.github.io/blog/./2023-04-24_050254</link><description>A short piece questioning why we drink alcohol</description><content:encoded><![CDATA[
<h1 id=why-so-much-alcohol>Why so much Alcohol</h1><p>It was my girlfriend’s birthday recently, and I was tasked with organising the event. This generally means that I navigate the complex structures of the birthday girl’s social life and invite the right set of people so that no one is offended, but also no one feels uncomfortable in the party. That, and order the food and alcohol. Now naturally, being students at university, the alcohol part requires some tact. The common method has been to order it via a delivery app/service thing. The delivery boy reaches the store, you pick your poison and pay digitally, and he arrives within 15 minutes to the campus. Now the city I live in is weird, and shops tend to close by 11. Still, late enough that one can order it before the party starts.<p>Most students however, prefer to get their alcohol well in advance, showing a knack for forethought rarely seen when it comes to matters of academic interest. By 8 PM, it has reached some acquaintance’s room, and eventually it comes with the said acquaintance to the party. Often in friend groups, this job is given to the person most experienced with this protocol, and the initial experience is sought by befriending said experienced folks.<p>In our party however, my go to experienced friend couldn’t make it. No issues, I have another. However, the complex social hierarchies dictated that the other experienced friend shouldn’t be asked for this help. Thus it fell to me.<p>Now I have rarely broken rules. In the past I may have been a Hermione, and been a stickler for them. Through years of a mixture of peer pressure, curiosity, and exposure to a more liberal view to such things, I have begun to partake in some rule breaking, but still refrain from doing so too often, and from facilitating the said rule breaking.<p>That meant I was unsure of the exact protocol, and the many, many dependencies necessary to complete it. If the party starts at 11, I reasoned, then starting the delivery by 10 should cut it. It would still cause a slight inconvenience with my schedule for bath, but that should be manageable. What I didn’t factor, dear reader, is that this city goes to sleep so early, and given it was a Sunday, it did so even earlier. Not one delivery boy could be found, and that meant I couldn’t order the alcohol.<p>But my friends’ expectations for a fun night rested on me. I had to secure some from anywhere. Now I did attempt a few ways, but none worked out. Thus, we were going to have a party without alcohol. But, I thought, most people in my friend circle are not heavy drinkers. Also some have exams tomorrow, and need to study. Some have to wake up early. One doesn’t drink at all. Plus its not like we’ve not had parties before. In our more timid early semesters, things were pretty virgin. We’ll still have fun.<p>Sour grapes.<p>We did have fun. People stayed for about 3 hours, which is a decent time, and no one seemed exceptionally bored. We played a few card games, which I thought were fun, and most people enjoyed. Me and my girlfriend still had fun after. Playing some more card games I mean. And yet, at some point, someone remarked that since most of us were free that day, any of us could have gone out and gotten alcohol. True, I can hardly argue. I was lazing around until dinner time anyway. And we did have fun during the party without alcohol too. But still, people wanted it.<p>Now, I get the point of alcohol, it lets you let yourself lose (loose?). It lubricates the slightly slower moments of the night. But you hardly require it for fun. Sure, its funny to see the lightweights let loose much faster, and the more serious ones lighten up for once. But you don’t need alcohol to feel comfortable, and to relax. Definitely, it tastes kinda bad, but a light buzz feels great. But surely, that buzz can be replaced with great moments in your full consciousness.<p>And yet, sometimes I wonder, maybe we really do need alcohol to have fun.
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2023-04-24_050254</guid></item><item><pubDate>Sun, 12 Nov 2023 00:00:00 +0530</pubDate><title>My Default apps in 2023</title><link>https://dhruvasambrani.github.io/blog/./2023-11-12_003358</link><description>desc:</description><content:encoded><![CDATA[
<h1 id=my-default-apps-in-2023>My Default Apps in 2023</h1><p>So I saw <a href=https://kevquirk.com/my-default-apps-at-the-end-of-2023>Kev’s post</a> on his list of apps, and I thought I might as well put my thing up too, because why not.<ul><li>📨 Mail Service: Gmail/institute mail<li>📮 Mail Client: <a href=https://aerc-mail.org/>aerc</a> (Linux), <a href=https://k9mail.app/>K9 Mail</a> (Android)<li>📝 Notes: <a href=https://joplinapp.org/>Joplin</a><li>✅ To-Do: Joplin with <a href=https://github.com/joplin/plugin-kanban>Kanban plugin</a><li>📆 Calendar: Selfhosted <a href=https://radicale.org/v3.html>Radicale</a>. Clients: <a href=https://github.com/pimutils/khal>khal</a> for PC, <a href=https://www.davx5.com/>DAVx</a> for Android.<li>🙍🏻♂️ Contacts: Selfhosted Radical. Clients: <a href=https://github.com/lucc/khard>khard</a> for PC, <a href=https://www.davx5.com/>DAVx</a> for Android.<li>📖 RSS Service: Selfhosted <a href=https://github.com/FreshRSS/FreshRSS>FreshRSS</a><li>🗞️ RSS Client: <a href=https://hyliu.me/fluent-reader-lite/>FluentReader</a> (android), <a href=https://newsboat.org/>newsboat</a><li>⌨️ Launcher: <a href=https://kisslauncher.com/>KISS</a> (Android), <a href=https://tools.suckless.org/dmenu/scripts/>dmenu</a> (X11, planning to switch to bemenu or equiv)<li>☁️ Cloud storage: <a href=https://syncthing.net/>Syncthing</a><li>🌅 Photo library: Local, Synced with syncthing<li>🌐 Web Browser: <a href=https://f-droid.org/packages/org.mozilla.fennec_fdroid/>Fennec</a> (android), Firefox<li>💬 Chat: Signal & WhatsApp<li>🔖 Bookmarks: Ew. Never cleared history ftw. But i should probably set up something.<li>📚 Reading: Kindle 8th Gen something, idek<li>📜 Word Processing: Libreoffice<li>📈 Spreadsheets: Libreoffice, but would like to switch<li>📊 Presentations: <a href=https://quarto.org/>Quarto</a><li>🛒 Shopping Lists: Joplin<li>💰 Personal Finance: Libreoffice, but i tried to make a finance app. pretty pointless<li>🎵 Music: Spotify<li>🎤 Podcasts: None<li>🔐 Password Management: <a href=https://www.passwordstore.org/>pass(1)</a>, <a href=https://github.com/android-password-store/Android-Password-Store#readme>Password Store</a> (android)<li>🤦♂️ Social Media: Instagram<li>🌤️ Weather: <a href=https://openweathermap.org/>Open Weather API</a> with <a href=https://gitlab.com/BeoCode/weather>Weather (BeoCode)</a><li>🔎 Search: DuckDuckGo<li>🧮 Code Editor: VSCodium</ul><p>Happy Deepawali!!
        ]]></content:encoded><author>dhruvasambrani19@gmail.com (Dhruva Sambrani)</author><guid>https://dhruvasambrani.github.io/blog/./2023-11-12_003358</guid></item></channel></rss>